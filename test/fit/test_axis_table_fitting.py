import random
random.seed('This is an hashable objet to initialize the basic random number generator')
from adel.fit.axis_table_fitting import create_index_axis_list,\
    create_index_plt_list, create_N_phyt_list, create_T_em_leaf1_list,\
    create_T_stop_axis_list, create_id_dim_list, create_id_phen_list,\
    create_id_ear_list

plant_ids = range(1,101)
expected_index_axis_list = [1, 3, 4, 5, 1, 3, 4, 5, 5, 1, 3, 4, 5, 5, 1, 3, 4, 5, 1, 3, 4, 5, 1, 3, 4, 1, 3, 4, 5, 5, 1, 3, 4, 1, 3, 4, 5, 1, 3, 4, 5, 5, 1, 3, 4, 5, 1, 3, 4, 5, 5, 1, 3, 4, 5, 5, 1, 3, 4, 5, 5, 1, 3, 4, 5, 1, 3, 4, 5, 1, 3, 4, 5, 5, 1, 3, 4, 5, 1, 3, 4, 1, 3, 4, 1, 3, 4, 5, 5, 1, 3, 4, 5, 5, 1, 3, 4, 5, 1, 3, 4, 5, 1, 3, 4, 5, 5, 1, 3, 4, 5, 5, 1, 3, 4, 5, 1, 3, 4, 5, 5, 1, 3, 4, 5, 1, 3, 4, 5, 1, 3, 4, 1, 3, 4, 1, 3, 4, 5, 1, 3, 4, 5, 5, 1, 3, 4, 5, 5, 1, 3, 4, 1, 3, 4, 1, 3, 4, 5, 5, 1, 3, 4, 5, 1, 3, 4, 5, 1, 3, 4, 5, 5, 1, 3, 4, 1, 3, 4, 1, 3, 4, 5, 5, 1, 3, 4, 1, 3, 4, 5, 5, 1, 3, 4, 5, 1, 3, 4, 1, 3, 4, 5, 5, 1, 3, 4, 5, 1, 3, 4, 5, 1, 3, 4, 1, 3, 4, 5, 1, 3, 4, 5, 5, 1, 3, 4, 1, 3, 4, 5, 1, 3, 4, 5, 5, 1, 3, 4, 5, 1, 3, 4, 5, 1, 3, 4, 5, 5, 1, 3, 4, 5, 1, 3, 4, 5, 1, 3, 4, 5, 1, 3, 4, 5, 5, 1, 3, 4, 5, 1, 3, 4, 5, 5, 1, 3, 4, 5, 1, 3, 4, 5, 1, 3, 4, 5, 5, 1, 3, 4, 5, 1, 3, 4, 5, 1, 3, 4, 1, 3, 4, 5, 5, 1, 3, 4, 5, 1, 3, 4, 5, 1, 3, 4, 5, 5, 1, 3, 4, 5, 5, 1, 3, 4, 5, 1, 3, 4, 5, 5, 1, 3, 4, 5, 1, 3, 4, 5, 1, 3, 4, 5, 1, 3, 4, 5, 5, 1, 3, 4, 1, 3, 4, 1, 3, 4, 5, 1, 3, 4, 5, 1, 3, 4, 5, 1, 3, 4, 5, 5, 1, 3, 4, 5, 1, 3, 4, 5, 5, 1, 3, 4, 5, 1, 3, 4, 5, 1, 3, 4, 5, 1, 3, 4, 5, 1, 3, 4, 1, 3, 4, 5, 1, 3, 4, 5, 1, 3, 4, 5, 5, 1, 3, 4, 5]
expected_index_plt_list = [1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 7, 7, 7, 7, 7, 8, 8, 8, 9, 9, 9, 9, 10, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 15, 15, 15, 15, 16, 16, 16, 16, 17, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 20, 20, 20, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 23, 23, 23, 23, 24, 24, 24, 24, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 27, 27, 27, 27, 28, 28, 28, 28, 28, 29, 29, 29, 29, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 38, 38, 38, 38, 39, 39, 39, 39, 40, 40, 40, 40, 41, 41, 41, 41, 41, 42, 42, 42, 43, 43, 43, 44, 44, 44, 44, 44, 45, 45, 45, 46, 46, 46, 46, 46, 47, 47, 47, 47, 48, 48, 48, 49, 49, 49, 49, 49, 50, 50, 50, 50, 51, 51, 51, 51, 52, 52, 52, 53, 53, 53, 53, 54, 54, 54, 54, 54, 55, 55, 55, 56, 56, 56, 56, 57, 57, 57, 57, 57, 58, 58, 58, 58, 59, 59, 59, 59, 60, 60, 60, 60, 60, 61, 61, 61, 61, 62, 62, 62, 62, 63, 63, 63, 63, 64, 64, 64, 64, 64, 65, 65, 65, 65, 66, 66, 66, 66, 66, 67, 67, 67, 67, 68, 68, 68, 68, 69, 69, 69, 69, 69, 70, 70, 70, 70, 71, 71, 71, 71, 72, 72, 72, 73, 73, 73, 73, 73, 74, 74, 74, 74, 75, 75, 75, 75, 76, 76, 76, 76, 76, 77, 77, 77, 77, 77, 78, 78, 78, 78, 79, 79, 79, 79, 79, 80, 80, 80, 80, 81, 81, 81, 81, 82, 82, 82, 82, 83, 83, 83, 83, 83, 84, 84, 84, 85, 85, 85, 86, 86, 86, 86, 87, 87, 87, 87, 88, 88, 88, 88, 89, 89, 89, 89, 89, 90, 90, 90, 90, 91, 91, 91, 91, 91, 92, 92, 92, 92, 93, 93, 93, 93, 94, 94, 94, 94, 95, 95, 95, 95, 96, 96, 96, 97, 97, 97, 97, 98, 98, 98, 98, 99, 99, 99, 99, 99, 100, 100, 100, 100]
expected_N_phyt_list = [14, 11, 11, 10, 14, 12, 11, 11, 10, 10, 7, 7, 7, 7, 14, 12, 11, 10, 11, 9, 8, 8, 14, 12, 11, 11, 9, 8, 7, 7, 12, 10, 9, 11, 8, 8, 8, 14, 12, 11, 10, 10, 14, 11, 11, 10, 14, 12, 11, 10, 11, 14, 12, 11, 10, 11, 14, 11, 11, 11, 11, 14, 11, 11, 11, 14, 12, 11, 11, 14, 11, 11, 10, 11, 14, 12, 11, 10, 11, 8, 8, 14, 11, 11, 13, 11, 10, 9, 9, 14, 11, 11, 10, 10, 14, 11, 11, 10, 12, 9, 9, 9, 10, 8, 7, 6, 7, 14, 12, 11, 11, 11, 13, 11, 10, 9, 14, 12, 11, 11, 10, 14, 11, 11, 11, 13, 11, 10, 9, 11, 9, 9, 14, 11, 11, 14, 12, 11, 10, 14, 11, 11, 10, 10, 13, 11, 10, 9, 9, 11, 8, 8, 14, 11, 11, 11, 9, 8, 8, 8, 14, 12, 11, 10, 13, 10, 10, 10, 10, 8, 7, 7, 7, 14, 12, 11, 14, 11, 11, 10, 8, 7, 7, 6, 14, 11, 11, 14, 11, 11, 10, 10, 14, 12, 11, 10, 11, 8, 8, 12, 10, 10, 8, 9, 14, 11, 11, 11, 14, 11, 11, 11, 11, 9, 9, 14, 12, 11, 11, 14, 11, 11, 10, 10, 14, 11, 11, 14, 12, 11, 10, 12, 10, 9, 9, 8, 13, 10, 10, 9, 10, 7, 7, 7, 14, 12, 11, 10, 10, 14, 12, 11, 11, 14, 11, 11, 11, 14, 12, 11, 10, 14, 11, 11, 11, 11, 14, 11, 11, 11, 14, 11, 11, 11, 10, 14, 12, 10, 10, 14, 11, 10, 10, 13, 11, 10, 10, 10, 14, 12, 11, 10, 14, 12, 11, 11, 12, 10, 10, 14, 12, 11, 10, 11, 14, 11, 11, 11, 14, 11, 11, 10, 11, 9, 8, 8, 8, 14, 12, 11, 11, 10, 14, 11, 11, 11, 13, 11, 10, 10, 10, 14, 12, 11, 10, 12, 10, 9, 8, 13, 10, 10, 10, 14, 11, 11, 10, 10, 14, 12, 11, 11, 9, 8, 11, 9, 8, 8, 14, 11, 11, 11, 14, 12, 11, 11, 14, 12, 11, 10, 10, 12, 10, 10, 8, 13, 11, 10, 10, 9, 14, 11, 11, 10, 14, 12, 11, 10, 11, 9, 9, 8, 14, 11, 11, 11, 11, 9, 8, 14, 12, 11, 10, 14, 11, 11, 11, 11, 9, 8, 8, 8, 14, 11, 11, 10]
expected_T_em_leaf1_list = [1.0921198309077205, None, None, None, -12.785164757848998, None, None, None, None, 0.20778241302630743, None, None, None, None, -1.2485677489727958, None, None, None, -3.5999996846987625, None, None, None, 3.6755389247972676, None, None, 12.197347616844535, None, None, None, None, 4.5957103336122245, None, None, 5.3443872199438918, None, None, None, -11.415036800207973, None, None, None, None, -13.422524423491225, None, None, None, -6.7922198826222138, None, None, None, None, -6.9708914934220596, None, None, None, None, 12.053231908980955, None, None, None, None, 8.7790576981306359, None, None, None, 8.3579103589112478, None, None, None, -10.823251162253914, None, None, None, None, -8.6834248536806733, None, None, None, 1.4548934690649922, None, None, -9.6184808117413958, None, None, -3.1032720427840745, None, None, None, None, -7.3829265284768404, None, None, None, None, 13.332247556658878, None, None, None, 6.6978771664743437, None, None, None, 8.9183895103031645, None, None, None, None, -13.003940532019225, None, None, None, None, -8.6354690950567576, None, None, None, 3.765997691240011, None, None, None, None, 10.106753143709343, None, None, None, -14.188005657220065, None, None, None, 5.6607548061213988, None, None, -14.413208160455039, None, None, -11.065578908705, None, None, None, -14.560646655069794, None, None, None, None, 0.41744001315335905, None, None, None, None, -1.7445416608850126, None, None, -2.939472579087989, None, None, -4.982499601032135, None, None, None, None, 6.5963362644912182, None, None, None, -11.639934344675122, None, None, None, -7.0267745005865283, None, None, None, None, -1.8730116975715381, None, None, -12.121220056893536, None, None, -12.37209948067307, None, None, None, None, -1.0782040533723438, None, None, -12.381324637561754, None, None, None, None, 13.322226314559764, None, None, None, -9.7608688013629656, None, None, 10.195515823192736, None, None, None, None, 10.239264390294728, None, None, None, -2.5854938051510645, None, None, None, 8.6611870862201741, None, None, 14.152493382761353, None, None, None, -4.613840228549261, None, None, None, None, -3.9515457446439455, None, None, 7.1798690051894702, None, None, None, -1.701932346053993, None, None, None, None, 4.5451454469549919, None, None, None, -7.6958533671537266, None, None, None, 6.2843986199863693, None, None, None, None, 7.4188845062377471, None, None, None, -7.5546508161997794, None, None, None, -6.3879879581280008, None, None, None, 14.357990743778526, None, None, None, None, -7.1749079157148383, None, None, None, -7.7862987494233753, None, None, None, None, 3.052108029168811, None, None, None, -5.0550093754266374, None, None, None, -7.8228099638271669, None, None, None, None, -1.0076410061627166, None, None, None, 6.9979462832106742, None, None, None, -10.542606028133834, None, None, 9.3940185089229118, None, None, None, None, 11.670752503919186, None, None, None, -3.2785189620642075, None, None, None, -4.3242231344496904, None, None, None, None, -3.4608867569214636, None, None, None, None, -6.5208869545896979, None, None, None, -11.66479737840486, None, None, None, None, -6.726410019700225, None, None, None, 6.7110040602591079, None, None, None, 8.0365707260925987, None, None, None, 11.310619131525018, None, None, None, None, -6.3667120420557852, None, None, 13.954459805565763, None, None, 4.8382636712916849, None, None, None, 5.9926127466124282, None, None, None, 13.031720559091454, None, None, None, 6.0690904453172472, None, None, None, None, -5.3794257772746503, None, None, None, -13.675401217558658, None, None, None, None, 9.1727429454271299, None, None, None, -7.0687797045235987, None, None, None, 8.3417713462311198, None, None, None, -1.5395295634928645, None, None, None, -12.366076727558404, None, None, -0.31466054267832599, None, None, None, 5.0803580533276929, None, None, None, 0.1464336962050414, None, None, None, None, 3.7353498016067386, None, None, None]
expected_T_stop_axis_list = [597, None, None, None, 722, None, None, None, None, 601, None, None, None, None, 613, None, None, None, 638, None, None, None, 589, None, None, 513, None, None, None, None, 580, None, None, 573, None, None, None, 705, None, None, None, None, 726, None, None, None, 664, None, None, None, None, 666, None, None, None, None, 515, None, None, None, None, 537, None, None, None, 541, None, None, None, 700, None, None, None, None, 690, None, None, None, 594, None, None, 693, None, None, 630, None, None, None, None, 676, None, None, None, None, 505, None, None, None, 558, None, None, None, 534, None, None, None, None, 724, None, None, None, None, 688, None, None, None, 585, None, None, None, None, 527, None, None, None, 731, None, None, None, 570, None, None, 734, None, None, 702, None, None, None, 736, None, None, None, None, 599, None, None, None, None, 621, None, None, 628, None, None, 647, None, None, None, None, 561, None, None, None, 707, None, None, None, 669, None, None, None, None, 623, None, None, 712, None, None, 717, None, None, None, None, 611, None, None, 719, None, None, None, None, 508, None, None, None, 695, None, None, 525, None, None, None, None, 522, None, None, None, 626, None, None, None, 539, None, None, 501, None, None, None, 645, None, None, None, None, 640, None, None, 551, None, None, None, 618, None, None, None, None, 582, None, None, None, 681, None, None, None, 563, None, None, None, None, 549, None, None, None, 678, None, None, None, 657, None, None, None, 500, None, None, None, None, 674, None, None, None, 683, None, None, 998, 996, 592, 993, 991, 988, 650, 986, 984, 981, 686, 979, 976, 974, 972, 609, 969, 967, 964, 553, 962, 960, 957, 698, 955, 952, 529, 950, 948, 945, 943, 517, 940, 938, 936, 633, 933, 931, 928, 642, 926, 924, 921, 919, 635, 916, 914, 912, 909, 659, 907, 904, 902, 710, 900, 897, 895, 892, 662, 890, 888, 885, 556, 883, 880, 878, 546, 876, 873, 871, 520, 868, 866, 863, 861, 654, 859, 856, 503, 854, 851, 577, 849, 847, 844, 568, 842, 839, 837, 510, 835, 832, 830, 565, 827, 825, 823, 820, 652, 818, 815, 813, 729, 811, 808, 806, 803, 532, 801, 799, 796, 671, 794, 791, 789, 544, 787, 784, 782, 616, 779, 777, 775, 714, 772, 770, 606, 767, 765, 763, 575, 760, 758, 755, 604, 753, 751, 748, 746, 587, 743, 741, 738]
expected_id_dim_list = ['114', '311', '411', '510', '114', '312', '411', '511', '510', '110', '307', '407', '507', '507', '114', '312', '411', '510', '111', '309', '408', '508', '114', '312', '411', '111', '309', '408', '507', '507', '112', '310', '409', '111', '308', '408', '508', '114', '312', '411', '510', '510', '114', '311', '411', '510', '114', '312', '411', '510', '511', '114', '312', '411', '510', '511', '114', '311', '411', '511', '511', '114', '311', '411', '511', '114', '312', '411', '511', '114', '311', '411', '510', '511', '114', '312', '411', '510', '111', '308', '408', '114', '311', '411', '113', '311', '410', '509', '509', '114', '311', '411', '510', '510', '114', '311', '411', '510', '112', '309', '409', '509', '110', '308', '407', '506', '507', '114', '312', '411', '511', '511', '113', '311', '410', '509', '114', '312', '411', '511', '510', '114', '311', '411', '511', '113', '311', '410', '509', '111', '309', '409', '114', '311', '411', '114', '312', '411', '510', '114', '311', '411', '510', '510', '113', '311', '410', '509', '509', '111', '308', '408', '114', '311', '411', '111', '309', '408', '508', '508', '114', '312', '411', '510', '113', '310', '410', '510', '110', '308', '407', '507', '507', '114', '312', '411', '114', '311', '411', '110', '308', '407', '507', '506', '114', '311', '411', '114', '311', '411', '510', '510', '114', '312', '411', '510', '111', '308', '408', '112', '310', '410', '508', '509', '114', '311', '411', '511', '114', '311', '411', '511', '111', '309', '409', '114', '312', '411', '511', '114', '311', '411', '510', '510', '114', '311', '411', '114', '312', '411', '510', '112', '310', '409', '509', '508', '113', '310', '410', '509', '110', '307', '407', '507', '114', '312', '411', '510', '510', '114', '312', '411', '511', '114', '311', '411', '511', '114', '312', '411', '510', '114', '311', '411', '511', '511', '114', '311', '411', '511', '114', '311', '411', '511', '510', '114', '312', '410', '510', '114', '311', '410', '510', '113', '311', '410', '510', '510', '114', '312', '411', '510', '114', '312', '411', '511', '112', '310', '410', '114', '312', '411', '510', '511', '114', '311', '411', '511', '114', '311', '411', '510', '111', '309', '408', '508', '508', '114', '312', '411', '511', '510', '114', '311', '411', '511', '113', '311', '410', '510', '510', '114', '312', '411', '510', '112', '310', '409', '508', '113', '310', '410', '510', '114', '311', '411', '510', '510', '114', '312', '411', '111', '309', '408', '111', '309', '408', '508', '114', '311', '411', '511', '114', '312', '411', '511', '114', '312', '411', '510', '510', '112', '310', '410', '508', '113', '311', '410', '510', '509', '114', '311', '411', '510', '114', '312', '411', '510', '111', '309', '409', '508', '114', '311', '411', '511', '111', '309', '408', '114', '312', '411', '510', '114', '311', '411', '511', '111', '309', '408', '508', '508', '114', '311', '411', '510']
expected_id_phen_list = ['114', '311', '411', '510', '114', '312', '411', '511', '510', '110', '307', '407', '507', '507', '114', '312', '411', '510', '111', '309', '408', '508', '114', '312', '411', '111', '309', '408', '507', '507', '112', '310', '409', '111', '308', '408', '508', '114', '312', '411', '510', '510', '114', '311', '411', '510', '114', '312', '411', '510', '511', '114', '312', '411', '510', '511', '114', '311', '411', '511', '511', '114', '311', '411', '511', '114', '312', '411', '511', '114', '311', '411', '510', '511', '114', '312', '411', '510', '111', '308', '408', '114', '311', '411', '113', '311', '410', '509', '509', '114', '311', '411', '510', '510', '114', '311', '411', '510', '112', '309', '409', '509', '110', '308', '407', '506', '507', '114', '312', '411', '511', '511', '113', '311', '410', '509', '114', '312', '411', '511', '510', '114', '311', '411', '511', '113', '311', '410', '509', '111', '309', '409', '114', '311', '411', '114', '312', '411', '510', '114', '311', '411', '510', '510', '113', '311', '410', '509', '509', '111', '308', '408', '114', '311', '411', '111', '309', '408', '508', '508', '114', '312', '411', '510', '113', '310', '410', '510', '110', '308', '407', '507', '507', '114', '312', '411', '114', '311', '411', '110', '308', '407', '507', '506', '114', '311', '411', '114', '311', '411', '510', '510', '114', '312', '411', '510', '111', '308', '408', '112', '310', '410', '508', '509', '114', '311', '411', '511', '114', '311', '411', '511', '111', '309', '409', '114', '312', '411', '511', '114', '311', '411', '510', '510', '114', '311', '411', '114', '312', '411', '510', '112', '310', '409', '509', '508', '113', '310', '410', '509', '110', '307', '407', '507', '114', '312', '411', '510', '510', '114', '312', '411', '511', '114', '311', '411', '511', '114', '312', '411', '510', '114', '311', '411', '511', '511', '114', '311', '411', '511', '114', '311', '411', '511', '510', '114', '312', '410', '510', '114', '311', '410', '510', '113', '311', '410', '510', '510', '114', '312', '411', '510', '114', '312', '411', '511', '112', '310', '410', '114', '312', '411', '510', '511', '114', '311', '411', '511', '114', '311', '411', '510', '111', '309', '408', '508', '508', '114', '312', '411', '511', '510', '114', '311', '411', '511', '113', '311', '410', '510', '510', '114', '312', '411', '510', '112', '310', '409', '508', '113', '310', '410', '510', '114', '311', '411', '510', '510', '114', '312', '411', '111', '309', '408', '111', '309', '408', '508', '114', '311', '411', '511', '114', '312', '411', '511', '114', '312', '411', '510', '510', '112', '310', '410', '508', '113', '311', '410', '510', '509', '114', '311', '411', '510', '114', '312', '411', '510', '111', '309', '409', '508', '114', '311', '411', '511', '111', '309', '408', '114', '312', '411', '510', '114', '311', '411', '511', '111', '309', '408', '508', '508', '114', '311', '411', '510']
expected_id_ear_list


def test_create_index_axis_list():
    index_axis_list = create_index_axis_list(plant_ids)
    assert index_axis_list == expected_index_axis_list
    

def test_create_index_plt_list():
    index_plt_list = create_index_plt_list(plant_ids, expected_index_axis_list)
    assert index_plt_list == expected_index_plt_list
         
              
def test_create_N_phyt_list():
    N_phyt_list = create_N_phyt_list(expected_index_axis_list)
    assert N_phyt_list == expected_N_phyt_list
    

def test_create_T_em_leaf1_list():
    T_em_leaf1_list = create_T_em_leaf1_list(expected_index_axis_list)
    assert T_em_leaf1_list == expected_T_em_leaf1_list


def test_create_id_dim_list():
    id_dim_list = create_id_dim_list(expected_index_axis_list, expected_N_phyt_list)
    assert id_dim_list == expected_id_dim_list


def test_create_id_phen_list():
    id_phen_list = create_id_phen_list(expected_index_axis_list, expected_N_phyt_list)
    assert id_phen_list == expected_id_phen_list
    

def test_create_id_ear_list():
    id_ear_list = create_id_ear_list(expected_index_plt_list)
    assert id_ear_list == expected_id_ear_list
    
    
def test_create_T_stop_axis_list():
    T_stop_axis_list = create_T_stop_axis_list(len(expected_index_axis_list), int(len(expected_index_axis_list)/2), expected_T_em_leaf1_list)
    assert T_stop_axis_list == expected_T_stop_axis_list



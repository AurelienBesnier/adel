import random
random.seed('This is an hashable objet to initialize the basic random number generator')
from adel.fit.axis_table_fitting import create_index_axis_list,\
    create_index_plt_list, create_N_phyt_list, create_T_em_leaf1_list,\
    create_T_stop_axis_list, create_id_dim_list, create_id_phen_list,\
    create_id_ear_list

plant_ids = range(1,101)
expected_index_axis_list = [1, 4, 5, 6, 6, 1, 4, 5, 6, 1, 4, 5, 6, 6, 7, 1, 4, 5, 6, 6, 1, 4, 5, 6, 1, 4, 5, 6, 7, 1, 4, 5, 6, 6, 1, 4, 5, 6, 6, 7, 1, 4, 5, 6, 6, 1, 4, 5, 6, 6, 1, 4, 5, 6, 1, 4, 5, 6, 6, 1, 4, 5, 6, 1, 4, 5, 6, 6, 1, 5, 6, 1, 4, 5, 7, 1, 4, 5, 6, 6, 7, 1, 4, 5, 6, 6, 1, 4, 5, 6, 6, 1, 4, 5, 6, 1, 4, 5, 6, 6, 1,4, 5, 6, 6, 1, 4, 5, 6, 6, 1, 4, 5, 6, 1, 4, 5, 6, 6, 1, 4, 5, 6, 6, 1, 5, 6, 1, 4, 5, 6, 6, 7, 1, 5, 6, 1, 4, 5, 6, 6, 1, 4, 5, 6, 6, 7, 1, 4, 5, 6, 1, 4, 5, 1, 4, 5, 6, 6, 1, 5, 6, 1, 4, 5, 6, 6, 1, 4, 5, 1, 4, 5, 6, 6, 1, 4, 5, 6, 6, 7,1, 4, 5, 7, 1, 5, 6, 7, 1, 4, 5, 6, 6, 7, 1, 4, 5, 6, 1, 4, 5, 6, 6, 1, 4, 5, 6, 6, 7, 1, 4, 5, 6, 7, 1, 4, 5, 6, 1, 4, 5, 6, 6, 1, 4, 5, 6, 7, 1, 4, 5, 6, 7, 1, 5, 6, 1, 4, 5, 6, 6, 7, 1, 4, 5, 6, 6, 1, 4, 5, 6, 6, 7, 1, 4, 5, 6, 6, 1, 4,5, 6, 6, 7, 1, 4, 5, 6, 6, 7, 1, 4, 5, 6, 6, 7, 1, 4, 5, 6, 6, 1, 4, 5, 6, 6, 1, 6, 1, 4, 5, 6, 6, 1, 4, 5, 6, 6, 7, 1, 4, 5, 6, 1, 4, 5, 6, 6, 1, 4, 5, 7, 1, 4, 5, 6, 1, 4, 5, 6, 6, 7, 7, 1, 4, 5, 6, 1, 6, 1, 4, 5, 6, 6, 1, 4, 5, 6, 7, 1,4, 6, 6, 7, 1, 4, 5, 6, 6, 1, 4, 5, 6, 6, 1, 5, 6, 7, 1, 4, 5, 6, 6, 1, 4, 5, 6, 6, 7, 1, 4, 5, 6, 6, 1, 4, 5, 6, 6, 1, 4, 5, 6, 6, 1, 4, 5, 6, 1, 4, 5, 6, 6, 7, 1, 4, 5, 6, 6, 7, 1, 4, 5, 6, 1, 4, 5, 6, 6, 1, 4, 5, 6, 6, 1, 4, 5, 6, 6, 1,4, 5, 6, 6, 1, 4, 5, 6, 1, 4, 5, 6, 6, 1, 4, 5, 6, 7, 1, 5, 6, 1, 4, 5, 6, 1, 4, 5, 6, 6, 1, 4, 5, 6, 6, 1, 4, 5, 6, 6, 1, 4, 5, 6, 6, 1, 4, 5, 6, 6, 1, 4, 5, 6, 6]
expected_index_plt_list = [1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 14, 14, 15, 15, 15, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 24, 24, 24, 24, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 34, 34, 34, 35, 35, 35, 36, 36, 36, 36, 36, 37, 37, 37, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39, 40, 40, 40, 40, 41, 41, 41, 41, 42, 42, 42, 42, 42, 42, 43, 43, 43, 43, 44, 44, 44, 44, 44, 45, 45, 45, 45, 45, 45, 46, 46, 46, 46, 46, 47, 47, 47, 47, 48, 48, 48, 48, 48, 49, 49, 49, 49, 49, 50, 50, 50, 50, 50, 51, 51, 51, 52, 52, 52, 52, 52, 52, 53, 53, 53, 53, 53, 54, 54, 54, 54, 54, 54, 55, 55, 55, 55, 55, 56, 56, 56, 56, 56, 56, 57, 57, 57, 57, 57, 57, 58, 58, 58, 58, 58, 58, 59, 59, 59, 59, 59, 60, 60, 60, 60, 60, 61, 61, 62, 62, 62, 62, 62, 63, 63, 63, 63, 63, 63, 64, 64, 64, 64, 65, 65, 65, 65, 65, 66, 66, 66, 66, 67, 67, 67, 67, 68, 68, 68, 68, 68, 68, 68, 69, 69, 69, 69, 70, 70, 71, 71, 71, 71, 71, 72, 72, 72, 72, 72, 73, 73, 73, 73, 73, 74, 74, 74, 74, 74, 75, 75, 75, 75, 75, 76, 76, 76, 76, 77, 77, 77, 77, 77, 78, 78, 78, 78, 78, 78, 79, 79, 79, 79, 79, 80, 80, 80, 80, 80, 81, 81, 81, 81, 81, 82, 82, 82, 82, 83, 83, 83, 83, 83, 83, 84, 84, 84, 84, 84, 84, 85, 85, 85, 85, 86, 86, 86, 86, 86, 87, 87, 87, 87, 87, 88, 88, 88, 88, 88, 89, 89, 89, 89, 89, 90, 90, 90, 90, 91, 91, 91, 91, 91, 92, 92, 92, 92, 92, 93, 93, 93, 94, 94, 94, 94, 95, 95, 95, 95, 95, 96, 96, 96, 96, 96, 97, 97, 97, 97, 97, 98, 98, 98, 98, 98, 99, 99, 99, 99, 99, 100, 100, 100, 100, 100]
expected_N_phyt_list = [11, 9, 8, 7, 7, 11, 8, 7, 8, 11, 8, 8, 7, 7, 6, 12, 9, 8, 8, 8, 11, 8, 7, 7, 11, 8, 7, 7, 6, 11, 8, 8, 7, 7, 11, 9, 8, 7, 7, 7, 11, 8, 8, 7, 7, 12, 9, 9, 8, 8, 11, 8, 8, 7, 11, 8, 7, 7, 7, 11, 8, 8, 7, 11, 8, 7, 7, 7, 10, 6, 6, 11, 8, 8, 6, 11, 9, 8, 7, 7, 6, 11, 8, 8, 7, 7, 11, 8, 8, 7, 7, 10, 7, 7, 6, 11, 8, 7, 7, 7, 11, 8, 8, 7, 7, 11, 8, 8, 7, 7, 11, 9, 8, 7, 11, 8, 7, 7, 7, 11, 8, 8, 7, 7, 11, 8, 7, 11, 8, 7, 7, 7, 6, 11, 7, 7, 11, 8, 7, 7, 7, 11, 8, 7, 7, 7, 7, 11, 8, 8, 7, 11, 9, 7, 11, 8, 7, 7, 7, 10, 6, 6, 11, 8, 7, 7, 7, 10, 7, 7,11, 8, 8, 7, 8, 11, 8, 8, 7, 7, 7, 11, 8, 8, 6, 11, 8, 7, 7, 11, 9, 7, 7, 7, 7,11, 8, 7, 7, 10, 7, 7, 6, 6, 11, 8, 7, 7, 7, 6, 11, 8, 8, 7, 6, 10, 8, 7, 6, 11, 8, 8, 7, 7, 11, 8, 7, 7, 6, 11, 9, 7, 7, 7, 11, 8, 7, 11, 8, 7, 7, 7, 7, 11, 8, 7, 7, 7, 10, 7, 7, 6, 6, 5, 11, 8, 8, 7, 7, 11, 8, 8, 7, 7, 6, 11, 8, 8, 7, 7,7, 11, 8, 7, 7, 7, 6, 11, 9, 7, 7, 7, 11, 9, 8, 7, 7, 11, 8, 11, 9, 7, 7, 7, 10, 7, 7, 7, 6, 5, 11, 9, 7, 7, 11, 8, 8, 7, 7, 11, 8, 8, 7, 11, 8, 8, 7, 11, 8, 8, 7, 7, 7, 6, 12, 9, 8, 8, 11, 8, 11, 8, 8, 7, 7, 11, 8, 7, 7, 6, 11, 8, 7, 7, 6, 11, 8, 7, 7, 8, 11, 8, 7, 7, 7, 11, 7, 8, 7, 10, 7, 7, 6, 7, 12, 9, 9, 8, 8, 8, 11, 8, 8, 7, 7, 11, 9, 7, 7, 7, 10, 7, 7, 6, 6, 11, 8, 8, 7, 10, 7, 7, 6, 6, 6, 11, 8, 8, 7, 7, 7, 11, 8, 8, 7, 10, 8, 6, 6, 6, 11, 8, 7, 7, 7, 11, 8, 8, 7, 7, 11, 8, 8, 7, 7, 11, 8, 7, 7, 11, 9, 7, 7, 7, 12, 9, 8, 8, 7, 12, 9, 8, 11, 9, 8, 7, 11, 8, 8, 7, 8, 11, 8, 8, 7, 7, 10, 8, 7, 6, 6, 10, 8, 6, 6, 6, 11, 8, 7, 7, 7, 10, 7, 7, 6, 6]
expected_T_em_leaf1_list = [-1.0023898241968738, None, None, None, None, 5.571425511449279, None, None, None, 3.9071947677817036, None, None, None, None, None, 3.0046434736254728, None, None, None, None, -6.8729381113286951, None, None, None, -4.3096211335632395, None, None, None, None, 10.276044586999513, None, None, None, None, -4.8969109509387243, None, None, None, None, None, -8.5350706385227397, None, None, None, None, 11.158367924655201, None, None, None, None, -7.6673095968444773, None, None, None, -8.6494058820862598, None, None, None, None, 3.4013176105115828, None, None, None, 7.8066732816650264, None, None, None, None, -8.7488692974298203, None, None, 14.856505363981238, None, None, None, -8.4708982306296239, None, None, None, None, None, -11.896150929501307, None, None, None, None, -12.910069291053414, None, None, None, None, -11.614838673620074, None, None, None, 10.489683270656396, None, None, None, None, 1.0921198309077205, None, None, None,None, -12.785164757848998, None, None, None, None, 0.20778241302630743, None, None, None, -1.2485677489727958, None, None, None, None, -3.5999996846987625, None, None, None, None, 3.6755389247972676, None, None, 12.197347616844535, None, None, None, None, None, 4.5957103336122245, None, None, 5.3443872199438918, None,None, None, None, -11.415036800207973, None, None, None, None, None, -13.422524423491225, None, None, None, -6.7922198826222138, None, None, -6.9708914934220596, None, None, None, None, 12.053231908980955, None, None, 8.7790576981306359, None, None, None, None, 8.3579103589112478, None, None, -10.823251162253914, None, None, None, None, -8.6834248536806733, None, None, None, None, None, 1.4548934690649922, None, None, None, -9.6184808117413958, None, None, None, -3.1032720427840745, None, None, None, None, None, -7.3829265284768404, None, None, None, 13.332247556658878, None, None, None, None, 6.6978771664743437, None, None, None, None, None, 8.9183895103031645, None, None, None, None, -13.003940532019225, None, None, None, -8.6354690950567576, None, None, None, None, 3.765997691240011, None, None, None, None, 10.106753143709343, None, None, None, None, -14.188005657220065, None, None, 5.6607548061213988, None, None, None, None, None, -14.413208160455039, None, None, None, None, -11.065578908705, None, None, None, None, None, -14.560646655069794, None, None, None, None, 0.41744001315335905, None, None,None, None, None, -1.7445416608850126, None, None, None, None, None, -2.939472579087989, None, None, None, None, None, -4.982499601032135, None, None, None, None, 6.5963362644912182, None, None, None, None, -11.639934344675122, None, -7.0267745005865283, None, None, None, None, -1.8730116975715381, None, None, None, None, None, -12.121220056893536, None, None, None, -12.37209948067307, None, None, None, None, -1.0782040533723438, None, None, None, -12.381324637561754, None, None, None, 13.322226314559764, None, None, None, None, None, None, -9.7608688013629656, None, None, None, 10.195515823192736, None, 10.239264390294728, None, None, None, None, -2.5854938051510645, None, None, None, None, 8.6611870862201741, None, None, None, None, 14.152493382761353, None, None, None, None, -4.613840228549261, None, None, None, None, -3.9515457446439455, None, None, None, 7.1798690051894702, None, None, None, None, -1.701932346053993, None, None, None, None,None, 4.5451454469549919, None, None, None, None, -7.6958533671537266, None, None, None, None, 6.2843986199863693, None, None, None, None, 7.4188845062377471, None, None, None, -7.5546508161997794, None, None, None, None, None, -6.3879879581280008, None, None, None, None, None, 14.357990743778526, None, None, None, -7.1749079157148383, None, None, None, None, -7.7862987494233753, None, None, None, None, 3.052108029168811, None, None, None, None, -5.0550093754266374, None, None, None, None, -7.8228099638271669, None, None, None, -1.0076410061627166, None, None, None, None, 6.9979462832106742, None, None, None, None, -10.542606028133834, None, None, 9.3940185089229118, None, None, None, 11.670752503919186, None,None, None, None, -3.2785189620642075, None, None, None, None, -4.3242231344496904, None, None, None, None, -3.4608867569214636, None, None, None, None, -6.5208869545896979, None, None, None, None, -11.66479737840486, None, None, None, None]
expected_T_stop_axis_list = [585, None, None, None, None, 555, None, None, None, 564, None, None, None, None, None, 574, None, None, None, None, 633, None, None, None, 614, None, None, None, None, 519, None, None, None, None, 620, None, None, None, None, None, 656, None, None, None, None, 515, None, None, None, None, 645, None, None, None, 660, None, None, None, None, 570, None, None, None, 538, None, None,None, None, 664, None, None, 500, None, None, None, 654, None, None, None, None, None, 685, None, None, None, None, 696, None, None, None, None, 679, None, None, None, 517, None, None, None, None, 578, None, None, None, None, 694, None, None, None, None, 582, None, None, None, 591, None, None, None, None, 610, None, None, None, None, 568, None, None, 509, None, None, None, None, None, 559, None, None, 557, None, None, None, None, 677, None, None, None, None, None, 700, None,None, None, 631, None, None, 635, None, None, None, None, 511, None, None, 532,None, None, None, None, 536, None, None, 673, None, None, None, None, 662, None, None, None, None, None, 576, None, None, None, 666, None, None, None, 603, None, None, None, None, None, 641, None, None, None, 505, None, None, None, None, 547, None, None, None, None, None, 530, None, None, None, None, 698, None, None, None, 658, None, None, None, None, 566, None, None, None, None, 526, None, None,None, None, 702, None, None, 553, None, None, None, None, None, 704, None, None, None, None, 675, None, None, None, None, None, 706, None, None, None, None, 580, None, None, None, None, None, 595, None, None, None, None, None, 601, None, None, None, None, None, 622, None, None, None, None, 549, None, None, None, None,681, None, 637, None, None, None, None, 597, None, None, None, None, None, 687,998, 996, 994, 690, 992, 990, 988, 986, 589, 984, 982, 979, 692, 977, 975, 973,507, 971, 969, 967, 965, 963, 961, 669, 958, 956, 954, 524, 952, 522, 950, 948,946, 944, 599, 942, 940, 937, 935, 534, 933, 931, 929, 927, 503, 925, 923, 921,919, 618, 916, 914, 912, 910, 612, 908, 906, 904, 543, 902, 900, 898, 895, 593,893, 891, 889, 887, 885, 561, 883, 881, 879, 877, 648, 874, 872, 870, 868, 551,866, 864, 862, 860, 540, 858, 856, 853, 643, 851, 849, 847, 845, 843, 627, 841,839, 837, 835, 832, 501, 830, 828, 826, 639, 824, 822, 820, 818, 650, 816, 814,811, 809, 572, 807, 805, 803, 801, 624, 799, 797, 795, 793, 652, 790, 788, 786,587, 784, 782, 780, 778, 545, 776, 774, 772, 769, 671, 767, 765, 528, 763, 761,759, 513, 757, 755, 753, 751, 606, 748, 746, 744, 742, 616, 740, 738, 736, 734,608, 732, 729, 727, 725, 629, 723, 721, 719, 717, 683, 715, 713, 711, 708]
expected_id_dim_list = ['111', '409', '508', '607', '607', '111', '408', '507', '608', '111', '408', '508', '607', '607', '706', '112', '409', '508', '608', '608', '111','408', '507', '607', '111', '408', '507', '607', '706', '111', '408', '508', '607', '607', '111', '409', '508', '607', '607', '707', '111', '408', '508', '607', '607', '112', '409', '509', '608', '608', '111', '408', '508', '607', '111', '408', '507', '607', '607', '111', '408', '508', '607', '111', '408', '507', '607', '607', '110', '506', '606', '111', '408', '508', '706', '111', '409', '508', '607', '607', '706', '111', '408', '508', '607', '607', '111', '408', '508', '607', '607', '110', '407', '507', '606', '111', '408', '507', '607', '607', '111','408', '508', '607', '607', '111', '408', '508', '607', '607', '111', '409', '508', '607', '111', '408', '507', '607', '607', '111', '408', '508', '607', '607', '111', '508', '607', '111', '408', '507', '607', '607', '706', '111', '507', '607', '111', '408', '507', '607', '607', '111', '408', '507', '607', '607', '707', '111', '408', '508', '607', '111', '409', '507', '111', '408', '507', '607', '607', '110', '506', '606', '111', '408', '507', '607', '607', '110', '407', '507', '111', '408', '508', '607', '608', '111', '408', '508', '607', '607', '707','111', '408', '508', '706', '111', '508', '607', '707', '111', '409', '507', '607', '607', '707', '111', '408', '507', '607', '110', '407', '507', '606', '606', '111', '408', '507', '607', '607', '706', '111', '408', '508', '607', '706', '110', '408', '507', '606', '111', '408', '508', '607', '607', '111', '408', '507', '607', '706', '111', '409', '507', '607', '707', '111', '508', '607', '111', '408', '507', '607', '607', '707', '111', '408', '507', '607', '607', '110', '407', '507', '606', '606', '705', '111', '408', '508', '607', '607', '111', '408','508', '607', '607', '706', '111', '408', '508', '607', '607', '707', '111', '408', '507', '607', '607', '706', '111', '409', '507', '607', '607', '111', '409', '508', '607', '607', '111', '608', '111', '409', '507', '607', '607', '110', '407', '507', '607', '606', '705', '111', '409', '507', '607', '111', '408', '508', '607', '607', '111', '408', '508', '707', '111', '408', '508', '607', '111', '408', '508', '607', '607', '707', '706', '112', '409', '508', '608', '111', '608', '111', '408', '508', '607', '607', '111', '408', '507', '607', '706', '111','408', '607', '607', '706', '111', '408', '507', '607', '608', '111', '408', '507', '607', '607', '111', '507', '608', '707', '110', '407', '507', '606', '607', '112', '409', '509', '608', '608', '708', '111', '408', '508', '607', '607', '111', '409', '507', '607', '607', '110', '407', '507', '606', '606', '111', '408', '508', '607', '110', '407', '507', '606', '606', '706', '111', '408', '508', '607', '607', '707', '111', '408', '508', '607', '110', '408', '506', '606', '606', '111', '408', '507', '607', '607', '111', '408', '508', '607', '607', '111','408', '508', '607', '607', '111', '408', '507', '607', '111', '409', '507', '607', '607', '112', '409', '508', '608', '707', '112', '509', '608', '111', '409', '508', '607', '111', '408', '508', '607', '608', '111', '408', '508', '607', '607', '110', '408', '507', '606', '606', '110', '408', '506', '606', '606', '111', '408', '507', '607', '607', '110', '407', '507', '606', '606']
expected_id_phen_list = ['111', '409', '508', '607', '607', '111', '408', '507', '608', '111', '408', '508', '607', '607', '706', '112', '409', '508', '608', '608', '111', '408', '507', '607', '111', '408', '507', '607', '706', '111', '408', '508', '607', '607', '111', '409', '508', '607', '607', '707', '111', '408', '508', '607', '607', '112', '409', '509', '608', '608', '111', '408', '508', '607', '111', '408', '507', '607', '607', '111', '408', '508', '607', '111', '408', '507', '607', '607', '110', '506', '606', '111', '408', '508', '706', '111', '409', '508','607', '607', '706', '111', '408', '508', '607', '607', '111', '408', '508', '607', '607', '110', '407', '507', '606', '111', '408', '507', '607', '607', '111', '408', '508', '607', '607', '111', '408', '508', '607', '607', '111', '409', '508', '607', '111', '408', '507', '607', '607', '111', '408', '508', '607', '607', '111', '508', '607', '111', '408', '507', '607', '607', '706', '111', '507', '607', '111', '408', '507', '607', '607', '111', '408', '507', '607', '607', '707', '111', '408', '508', '607', '111', '409', '507', '111', '408', '507', '607','607', '110', '506', '606', '111', '408', '507', '607', '607', '110', '407', '507', '111', '408', '508', '607', '608', '111', '408', '508', '607', '607', '707', '111', '408', '508', '706', '111', '508', '607', '707', '111', '409', '507', '607', '607', '707', '111', '408', '507', '607', '110', '407', '507', '606', '606', '111', '408', '507', '607', '607', '706', '111', '408', '508', '607', '706', '110', '408', '507', '606', '111', '408', '508', '607', '607', '111', '408', '507', '607', '706', '111', '409', '507', '607', '707', '111', '508', '607', '111', '408', '507', '607', '607', '707', '111', '408', '507', '607', '607', '110', '407', '507', '606', '606', '705', '111', '408', '508', '607', '607', '111', '408', '508', '607', '607', '706', '111', '408', '508', '607', '607', '707', '111', '408', '507', '607', '607', '706', '111', '409', '507', '607', '607', '111', '409', '508', '607', '607', '111', '608', '111', '409', '507', '607', '607', '110', '407', '507', '607', '606', '705', '111', '409', '507', '607', '111', '408', '508', '607', '607', '111', '408', '508', '707', '111', '408', '508', '607', '111','408', '508', '607', '607', '707', '706', '112', '409', '508', '608', '111', '608', '111', '408', '508', '607', '607', '111', '408', '507', '607', '706', '111', '408', '607', '607', '706', '111', '408', '507', '607', '608', '111', '408', '507', '607', '607', '111', '507', '608', '707', '110', '407', '507', '606', '607', '112', '409', '509', '608', '608', '708', '111', '408', '508', '607', '607', '111', '409', '507', '607', '607', '110', '407', '507', '606', '606', '111', '408', '508', '607', '110', '407', '507', '606', '606', '706', '111', '408', '508','607', '607', '707', '111', '408', '508', '607', '110', '408', '506', '606', '606', '111', '408', '507', '607', '607', '111', '408', '508', '607', '607', '111', '408', '508', '607', '607', '111', '408', '507', '607', '111', '409', '507', '607', '607', '112', '409', '508', '608', '707', '112', '509', '608', '111', '409', '508', '607', '111', '408', '508', '607', '608', '111', '408', '508', '607', '607', '110', '408', '507', '606', '606', '110', '408', '506', '606', '606', '111', '408', '507', '607', '607', '110', '407', '507', '606', '606']
expected_id_ear_list


def test_create_index_axis_list():
    index_axis_list = create_index_axis_list(plant_ids)
    assert index_axis_list == expected_index_axis_list
    

def test_create_index_plt_list():
    index_plt_list = create_index_plt_list(plant_ids, expected_index_axis_list)
    assert index_plt_list == expected_index_plt_list
         
              
def test_create_N_phyt_list():
    N_phyt_list = create_N_phyt_list(expected_index_axis_list)
    assert N_phyt_list == expected_N_phyt_list
    

def test_create_T_em_leaf1_list():
    T_em_leaf1_list = create_T_em_leaf1_list(expected_index_axis_list)
    assert T_em_leaf1_list == expected_T_em_leaf1_list


def test_create_id_dim_list():
    id_dim_list = create_id_dim_list(expected_index_axis_list, expected_N_phyt_list)
    assert id_dim_list == expected_id_dim_list


def test_create_id_phen_list():
    id_phen_list = create_id_phen_list(expected_index_axis_list, expected_N_phyt_list)
    assert id_phen_list == expected_id_phen_list
    

def test_create_id_ear_list():
    id_ear_list = create_id_ear_list(expected_index_plt_list)
    assert id_ear_list == expected_id_ear_list
    
    
def test_create_T_stop_axis_list():
    T_stop_axis_list = create_T_stop_axis_list(len(expected_index_axis_list), int(len(expected_index_axis_list)/2), expected_T_em_leaf1_list)
    assert T_stop_axis_list == expected_T_stop_axis_list


